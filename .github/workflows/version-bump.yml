name: Version Bump

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      pre_release:
        description: 'Pre-release identifier (optional: a, b, rc)'
        required: false
        type: string
      promote:
        description: 'Promote current pre-release to stable (ignore bump_type if true)'
        required: false
        default: false
        type: boolean
      create_release:
        description: 'Create GitHub release after version bump'
        required: true
        default: true
        type: boolean

jobs:
  bump-version:
    runs-on: ubuntu-latest
    outputs:
      new-version: ${{ steps.bump.outputs.new-version }}
      old-version: ${{ steps.bump.outputs.old-version }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install packaging
        
    - name: Get current version
      id: current
      run: |
        CURRENT_VERSION="$(
          python <<'PY'
          import sys; sys.path.insert(0, 'src')
          from claude_notifier.__version__ import __version__
          print(__version__)
        PY
        )"
        echo "current-version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
        echo "📦 Current version: ${CURRENT_VERSION}"
        
    - name: Calculate new version
      id: bump
      run: |
        python << 'EOF'
        import os
        from packaging.version import Version
        
        current_version = "${{ steps.current.outputs.current-version }}"
        bump_type = "${{ github.event.inputs.bump_type }}"  # patch/minor/major
        pre_release = "${{ github.event.inputs.pre_release }}"  # a/b/rc (optional)
        promote = "${{ github.event.inputs.promote }}"  # 'true' or 'false'
        
        print(f"Current version: {current_version}")
        print(f"Bump type: {bump_type}")
        print(f"Pre-release input: {pre_release}")
        print(f"Promote: {promote}")
        
        v = Version(current_version)
        is_promote = str(promote).lower() == 'true'
        
        def bump_base(ver: Version, kind: str):
            if kind == 'major':
                return ver.major + 1, 0, 0
            if kind == 'minor':
                return ver.major, ver.minor + 1, 0
            # default patch
            return ver.major, ver.minor, ver.micro + 1
        
        # 1) Promote: strip pre-release to base version without increment
        if is_promote:
            if v.pre is None:
                print("ℹ️ Current version is already stable; promote does nothing")
                new_version = f"{v.major}.{v.minor}.{v.micro}"
            else:
                new_version = v.base_version
        else:
            # 2) Normal bump
            new_major, new_minor, new_micro = bump_base(v, bump_type)
            new_version = f"{new_major}.{new_minor}.{new_micro}"
            
            # 3) Optional pre-release append using PEP 440 ids a/b/rc
            if pre_release:
                mapping = {
                    'alpha': 'a', 'a': 'a',
                    'beta': 'b', 'b': 'b',
                    'rc': 'rc'
                }
                pre_id = mapping.get(pre_release.lower())
                if not pre_id:
                    print(f"⚠️ Unknown pre-release type: {pre_release}")
                else:
                    # If same pre channel continues, increment number; else start at 1
                    if v.pre and v.pre[0] == pre_id:
                        pre_number = (v.pre[1] or 0) + 1
                    else:
                        pre_number = 1
                    new_version = f"{new_version}{pre_id}{pre_number}"
        
        print(f"New version: {new_version}")
        
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f"new-version={new_version}\n")
            f.write(f"old-version={current_version}\n")
        EOF
        
    - name: Update version files
      run: |
        NEW_VERSION="${{ steps.bump.outputs.new-version }}"
        OLD_VERSION="${{ steps.bump.outputs.old-version }}"
        
        echo "🔄 Updating version from ${OLD_VERSION} to ${NEW_VERSION}"
        
        # Update __version__.py
        sed -i "s/__version__ = \"${OLD_VERSION}\"/__version__ = \"${NEW_VERSION}\"/" src/claude_notifier/__version__.py
        
        # Update __version_info__
        VERSION_INFO="$(
          python <<PY
          v = "${NEW_VERSION}".split('.')
          major, minor, patch = int(v[0]), int(v[1]), int(v[2].split('a')[0].split('b')[0].split('rc')[0])
          print(f'({major}, {minor}, {patch})')
        PY
        )"
        sed -i "s/__version_info__ = .*/__version_info__ = ${VERSION_INFO}/" src/claude_notifier/__version__.py
        
        # Verify changes
        python <<PY
          import sys; sys.path.insert(0, 'src')
          from claude_notifier.__version__ import __version__, __version_info__
          print(f'✅ Updated to version: {__version__}')
          print(f'✅ Version info: {__version_info__}')
          assert __version__ == '${NEW_VERSION}', f'Version mismatch: {__version__} != ${NEW_VERSION}'
        PY
        
    - name: Update CHANGELOG.md
      run: |
        NEW_VERSION="${{ steps.bump.outputs.new-version }}"
        DATE=$(date +"%Y-%m-%d")
        
        echo "📝 Updating CHANGELOG.md for version ${NEW_VERSION}"
        
        # Create temporary file with new entry
        cat > changelog_entry.md << EOF
        ## [${NEW_VERSION}] - ${DATE}
        
        ### Added
        - Version bump to ${NEW_VERSION}
        
        ### Changed
        - Updated for release ${NEW_VERSION}
        
        EOF
        
        # Insert after [Unreleased] section
        awk '
        /^## \[Unreleased\]/ {
            print $0
            print ""
            while ((getline line < "changelog_entry.md") > 0) {
                print line
            }
            next
        }
        { print }
        ' CHANGELOG.md > CHANGELOG_new.md
        
        mv CHANGELOG_new.md CHANGELOG.md
        rm changelog_entry.md
        
        echo "✅ CHANGELOG.md updated"
        
    - name: Configure git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
    - name: Commit version bump
      run: |
        NEW_VERSION="${{ steps.bump.outputs.new-version }}"
        OLD_VERSION="${{ steps.bump.outputs.old-version }}"
        
        git add -A
        git commit -m "chore: Bump version from ${OLD_VERSION} to ${NEW_VERSION}
        
        - Update package version to ${NEW_VERSION}
        - Update CHANGELOG.md with release notes
        - Automated version bump via GitHub Actions
        
        [skip ci]"
        
        echo "✅ Version bump committed"
        
    - name: Create and push tag
      run: |
        NEW_VERSION="${{ steps.bump.outputs.new-version }}"
        
        git tag -a "v${NEW_VERSION}" -m "Release version ${NEW_VERSION}
        
        Automated release tag created by GitHub Actions.
        See CHANGELOG.md for detailed release notes."
        
        git push origin main --tags
        
        echo "✅ Tag v${NEW_VERSION} created and pushed"

  create-release:
    needs: bump-version
    runs-on: ubuntu-latest
    if: github.event.inputs.create_release == 'true'
    steps:
    - uses: actions/checkout@v4
      with:
        ref: main
        
    - name: Generate release notes
      id: release-notes
      run: |
        NEW_VERSION="${{ needs.bump-version.outputs.new-version }}"
        OLD_VERSION="${{ needs.bump-version.outputs.old-version }}"
        
        echo "📝 Generating release notes for v${NEW_VERSION}"
        
        # Extract changelog section for this version
        awk "
        /^## \[${NEW_VERSION}\]/ {
            found=1
            next
        }
        found && /^## \[/ {
            found=0
        }
        found && !/^## \[/ {
            print
        }
        " CHANGELOG.md > release_notes.md
        
        # Add installation instructions
        cat >> release_notes.md << EOF
        ## 📦 Installation
        
        ```bash
        pip install claude-code-notifier==${NEW_VERSION}
        ```
        
        ## 🔄 Upgrade
        
        ```bash
        pip install --upgrade claude-code-notifier
        ```
        
        ## 📖 Documentation
        
        See the [README](https://github.com/${{ github.repository }}#readme) for usage instructions and examples.
        EOF
        
        # Set multiline output
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.bump-version.outputs.new-version }}
        release_name: Claude Notifier v${{ needs.bump-version.outputs.new-version }}
        body: ${{ steps.release-notes.outputs.RELEASE_NOTES }}
        draft: false
        prerelease: ${{ contains(needs.bump-version.outputs.new-version, 'a') || contains(needs.bump-version.outputs.new-version, 'b') || contains(needs.bump-version.outputs.new-version, 'rc') }}
        
    - name: Summary
      run: |
        NEW_VERSION="${{ needs.bump-version.outputs.new-version }}"
        OLD_VERSION="${{ needs.bump-version.outputs.old-version }}"
        
        echo "# 🎉 Version Bump Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Previous Version:** ${OLD_VERSION}" >> $GITHUB_STEP_SUMMARY
        echo "**New Version:** ${NEW_VERSION}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🚀 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Stable GitHub Releases will automatically publish to PyPI." >> $GITHUB_STEP_SUMMARY
        echo "Pre-releases will NOT be auto-published. If needed, manually trigger the Release workflow with environment=testpypi to publish to TestPyPI." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔗 Links" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- [Release Page](https://github.com/${{ github.repository }}/releases/tag/v${NEW_VERSION})" >> $GITHUB_STEP_SUMMARY
        echo "- [Compare Changes](https://github.com/${{ github.repository }}/compare/v${OLD_VERSION}...v${NEW_VERSION})" >> $GITHUB_STEP_SUMMARY